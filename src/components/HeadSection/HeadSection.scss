.down-CV{
    color: var( --color-white);
    border-radius: 3px;
    font-weight: bold;
    padding: 10px;
    margin: 1em;
    background-color: rgb(0, 145, 248);
    cursor: pointer;
}
.down-CV:hover{
    
    background-color: rgba(38, 165, 255, 0.4);
}
.linkedin{
    color: white;
    margin: 1em;
	font-size: 1em;
    cursor: pointer;
    padding: 12px 40px;
    border-radius: .2em;
    background-color: #0A66C2;
}
.linkedin:hover{
    background-color: #0e71d4;
}
.head-section{
    height: 600px;
    justify-content: center;
    background:linear-gradient(rgba(#1f1f38,1),rgba(#1f1f38,0.7), rgba(#1f1f38,0.6)), url("../../assets/bg-dev.jpg") ;
    background-size: cover;
}
.head-title {
    align-items: center;
    justify-content: center;
    z-index: 0;
}

@media (width< 515px) {
    .head-title {
        align-items: center;
        flex-direction: column;
    }
}
.description{
    text-align: center;
}
.description h1{
    color: var(--color-primary);
    text-align: center;
}
.description h3{
    font-weight: 200 ;
}
.description h4{
    font-weight: 200 ;
}



// Love dynamically typed text? You're gonna love this
// Edit these strings to see them typed on the screen:
$strings: (
	"- Frontend Developer -"
	/* "Coffee Lover ☕" */
	/* "Enjoy ☕" */
);

// now for some timing (in seconds)
$durCharFwd: 0.10; // character typed
$durFullGap: 2.00; // time between typed/delete
$durCharBwd: 0.08; // character deleted
$durDoneGap: 1.00; // time between strings

// initializing some variables and functions ✊🏼
$charCount: 0; $durTotal: 0;
@each $string in $strings {
	$charCount: $charCount + str-length($string);
	$durTotal: $durTotal
		+ (str-length($string) * ($durCharFwd + $durCharBwd))
		+ $durFullGap + $durDoneGap;
}
@function percent($string, $letter, $modifier) {
	$stringsPast: $string - 1; $time: 0;
	@while $stringsPast > 0 {
		$time: $time
			+ (($durCharFwd + $durCharBwd) * (str-length(nth($strings, $stringsPast))))
			+ $durFullGap + $durDoneGap;
		$stringsPast: $stringsPast - 1;
	}
	@if $letter <= str-length(nth($strings, $string)) {
		$time: $time
			+ ($durCharFwd * ($letter - 1));
	} @else {
		$time: $time
			+ ($durCharFwd * str-length(nth($strings, $string)))
			+ $durFullGap
			+ ($durCharBwd * ($letter - str-length(nth($strings, $string))));
	}
	@return ($time / $durTotal * 100 + $modifier) + "%";
}
$currentPercentage: 0;
// now THIS is where the magic happens... ✨
@keyframes typed {
	@for $i from 1 through length($strings) {
		// @for $j from 1 through (str-length(nth($strings, $i)) * 2 - 1) {
		@for $j from 1 through (str-length(nth($strings, $i)) * 2) {
			/* string #{$i}, char #{$j} */
			@if $j < str-length(nth($strings, $i)) * 2 { // not last character deleted
				#{percent($i, $j, 0)}, #{percent($i, $j+1, -0.001)} {
					@if $j <= str-length(nth($strings, $i)) {
						content: quote(#{str_slice(nth($strings, $i), 1, $j)});
					} @else {
						content: quote(#{str_slice(nth($strings, $i), 1, str-length(nth($strings, $i)) - ($j - str-length(nth($strings, $i))))});
					}
				}
			} @else {
				@if $i < length($strings) { // not last string
					#{percent($i, $j, 0)}, #{percent($i+1, 1, -0.001)} {
						content: "​"; // zero-width space to retain element height
					}
				} @else { // last string
					#{percent($i, $j, 0)}, 100% {
						content: "​"; // zero-width space to retain element height
					}
				}
			}
		}
	}
}
@keyframes beam-blink {
	75% { border-color: transparent; }
}
.type {
	display: flex;
	align-items: center;
	justify-content: center;
/* 	background-color: transparent;
	background-image: // skeuomorphism anyone?
		radial-gradient(rgba(#fff, 0.125), rgba(#fff, 0)),
		linear-gradient(to bottom, #000, #000 2px, #111 3px);
	background-repeat: repeat-y;
	background-position: center center;
	background-size: cover, 100% 3px; */
	font-size: 15px;
    
	color: white; // hacker green
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	&::after {
		content: "​"; // zero-width space to retain element height
		position: static;
		top: -13px;
		@media (max-width: 575px) { top: -33px; }
		display: inline-block;
		padding-right: 3px;
		padding-right: calc(3px + 0.1vw);
		white-space: nowrap;
		animation: typed #{$durTotal + "s"} linear 1s infinite, beam-blink 1s infinite;
	}
	/* &::before { // just generating some useful stats here 👋🏼
		content: "#{length($strings)} strings / #{$charCount} chars / #{$durTotal}s duration";
		@media (max-width: 575px) {
			content: "#{length($strings)} strings \A #{$charCount} chars \A #{$durTotal}s duration";
		}
		display: block;
		position: absolute;
		bottom: 0;
		width: 100%;
		padding: 3px 0;
		background: #00f; // aquaman blue
		color: #fff; // Brandon-McConnell white
		text-align: center;
		font-size: 18px;
		letter-spacing: 0.7px;
		white-space: pre-wrap;
	} */
}